
class Node:

    def __init__(self,data):

        self.data = data
        self.next = None

class LinkedList:

    def __init__(self):

        self.head = None
        
    def list_Len(self):
        
        curr_node = self.head

        if self.head is None:
            return 0

        ls_len = 1
  
        while curr_node.next is not self.head:
            
            ls_len = ls_len + 1
            curr_node = curr_node.next

        return ls_len

        
    def insert_Head(self,newNode):

        if self.head is None:

            self.head = newNode
            newNode.next = self.head

        else:
            last = self.last_node()
            tempNode = self.head
            self.head = newNode
            self.head.next = tempNode
            
            last.next =self.head
            del tempNode    
            
    def insert_At(self,newNode,pos):
        
        curr_node= self.head

        i=0
        
        if pos ==0:
            self.insert_Head(newNode)
            return None
        
        if pos < 0 or pos > self.list_Len():
            
            print("Invalid postion")
            return None
  
        while True:
  
            if i == pos:
                
                prev_node.next = newNode
                newNode.next = curr_node
                
                break
  
            prev_node = curr_node   
            curr_node = curr_node.next 
            i= i +1    
      
            
    def print_Node(self):
        
        if self.head is None:
            print ("List is Empty")
            return None
        
        currNode = self.head
        
        while True:

            print(currNode.data) 
           
            if currNode.next is  self.head:
                break
                
               
            
            currNode = currNode.next
            
            
    def kill_list_Len(self,curr_node):
        
        brk_node = curr_node



        ls_len = 1
  
        while curr_node.next is not brk_node:
            
            ls_len = ls_len + 1
            curr_node = curr_node.next

        return ls_len
    
    def kill_Node(self):
        
        
        currNode = self.head
        
        while True:

           # print(currNode.data) 
           
            if self.kill_list_Len(currNode)==1:
                
                self.head = currNode
                self.head.next = currNode
                
                print(currNode.data)
                
                break
                
               
            
            delNode = currNode.next
            tmpNode = delNode.next
            currNode.next =tmpNode
            delNode.next =None
            currNode=tmpNode




linkedList = LinkedList()
 
for i in range(0,100):
    
    nod = Node(i+1)
    
    linkedList.insert_At(nod,i)

    
linkedList.kill_Node()

#100 person standing in circle person 1 has sword initially kills the next person and handover the sword to next person and so on

For example person1 kills the 2nd person and handoever the sword to third person, the third person kills the fourth person and handover
the sword to fifth person and so on.

if it goes in continuous loop who will be alive at the last?
